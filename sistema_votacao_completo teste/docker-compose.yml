version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vote_counting_db
    environment:
      POSTGRES_USER: ${DB_USER:-votecounting}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: ${DB_NAME:-vote_counting}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-votecounting}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vote_counting_network

  # Node.js Application
  app:
    build: .
    container_name: vote_counting_app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${DB_USER:-votecounting}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-vote_counting}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    command: npm run dev
    networks:
      - vote_counting_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  vote_counting_network:
    driver: bridge

